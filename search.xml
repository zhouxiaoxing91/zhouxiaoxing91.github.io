<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dubbo负载均衡算法</title>
      <link href="/2019/07/19/dubbo-loadbalance/"/>
      <url>/2019/07/19/dubbo-loadbalance/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、随机+权重</p></blockquote><p>RandomLoadBalance 是加权随机算法的具体实现，它的算法思想很简单。假设我们有一组服务器 servers = [A, B, C]，他们对应的权重为 weights = [5, 3, 2]，权重总和为10。现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。比如，经过一万次选择后，服务器 A 被选中的次数大约为5000次，服务器 B 被选中的次数约为3000次，服务器 C 被选中的次数约为2000次。</p><blockquote><p>2、轮训+权重</p></blockquote><p>RoundRobinLoadBalance 在详细分析源码前，我们先来了解一下什么是加权轮询。这里从最简单的轮询开始讲起，所谓轮询是指将请求轮流分配给每台服务器。举个例子，我们有三台服务器 A、B、C。我们将第一个请求分配给服务器 A，第二个请求分配给服务器 B，第三个请求分配给服务器 C，第四个请求再次分配给服务器 A。这个过程就叫做轮询。轮询是一种无状态负载均衡算法，实现简单，适用于每台服务器性能相近的场景下。</p><p>但现实情况下，我们并不能保证每台服务器性能均相近。如果我们将等量的请求分配给性能较差的服务器，这显然是不合理的。因此，这个时候我们需要对轮询过程进行加权，以调控每台服务器的负载。经过加权后，每台服务器能够得到的请求数比例，接近或等于他们的权重比。比如服务器 A、B、C 权重比为 5:2:1。那么在8次请求中，服务器 A 将收到其中的5次请求，服务器 B 会收到其中的2次请求，服务器 C 则收到其中的1次请求。</p><blockquote><p>3、最小活跃量</p></blockquote><p>LeastActiveLoadBalance 翻译过来是最小活跃数负载均衡。活跃调用数越小，表明该服务提供者效率越高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。举个例子说明一下，在一个服务提供者集群中，有两个性能优异的服务提供者。某一时刻它们的活跃数相同，此时 Dubbo 会根据它们的权重去分配请求，权重越大，获取到新请求的概率就越大。如果两个服务提供者权重相同，此时随机选择一个即可。</p><blockquote><p>4、一致性hash</p></blockquote><p>一致性 hash 算法由麻省理工学院的 Karger 及其合作者于1997年提出的，算法提出之初是用于大规模缓存系统的负载均衡。它的工作过程是这样的，首先根据 ip 或者其他的信息为缓存节点生成一个 hash，并将这个 hash 投射到 [0, 232 - 1] 的圆环上。当有查询或写入请求时，则为缓存项的 key 生成一个 hash 值。然后查找第一个大于或等于该 hash 值的缓存节点，并到这个节点中查询或写入缓存项。如果当前节点挂了，则在下一次查询或写入缓存时，为缓存项查找另一个大于其 hash 值的缓存节点即可。大致效果如下图所示，每个缓存节点在圆环上占据一个位置。如果缓存项的 key 的 hash 值小于缓存节点 hash 值，则到该缓存节点中存储或读取缓存项。比如下面绿色点对应的缓存项将会被存储到 cache-2 节点中。由于 cache-3 挂了，原本应该存到该节点中的缓存项最终会存储到 cache-4 节点中。</p><p><img src="/images/loadbalance/consistents_hash_1.png" alt></p><p>下面来看看一致性 hash 在 Dubbo 中的应用。我们把上图的缓存节点替换成 Dubbo 的服务提供者，于是得到了下图：</p><p><img src="/images/loadbalance/consistents_hash_2.png" alt></p><p>这里相同颜色的节点均属于同一个服务提供者，比如 Invoker1-1，Invoker1-2，……, Invoker1-160。这样做的目的是通过引入虚拟节点，让 Invoker 在圆环上分散开来，避免数据倾斜问题。所谓数据倾斜是指，由于节点不够分散，导致大量请求落到了同一个节点上，而其他节点只会接收到了少量请求的情况。比如：</p><p><img src="/images/loadbalance/consistents_hash_3.png" alt></p><blockquote><p>参考连接</p></blockquote><ul><li><input disabled type="checkbox"> dubbo负载均衡 ：<a href="http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html</a></li><li><input disabled type="checkbox"> ngnix负载均衡： <a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/load_balancing.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对大学的思考</title>
      <link href="/2019/05/24/experience/"/>
      <url>/2019/05/24/experience/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初中高中到大学，似乎走进人生天堂。没有老师的强制要求，没有统一式的学习，没有填鸭式的教学，一切都变得自然。大学时代强调的是自主学习，自我约束。没有要求的”童鞋们“，LOL和DOTA风声四起，这里不是吐槽玩游戏，自己也在玩，只是表达一种现象。自我认为，大学最怕就没有方向，更怕的走错方向，浪费时间。这里就不得不说的”教育体制“，对于一个刚刚上大学的学生，人生的迷茫的，优秀学校和完善的教学体制会让学生提前进入状态，找准目标。</p></blockquote><blockquote><p>然对一般的大学，本来提供的资源就是极其有限，再加之教学体制漏洞，学生时常无助举措。本人专业是电子信息类，听名字就比较高端，高端同时需要”强大的师资力量“，”齐备的实验器材“等。然而学校什么都没有，四年学习就是空壳，高端的行业对我来说也沦为鸡肋。我也时常反思，到底是不是我自己的问题？答案的很肯定的，是自己的问题，但学校也有众多的责任。假设我是个积极好学的学生，大四上学期学校刚刚开设了web前端课程，让我产生浓厚的兴趣并想深入学习。可这是正值找工作时机，所以只能学习大概，草草了事，这是教学安排问题。再者，虽提早了解相关的web前端，但是学校资源有限，也并非所有人能够享受到资源，当然更多得靠自我努力。这里只是想阐明大学的教学体制漏洞，学校实际教学是与现实社会需求是脱节分立的，交出的学生并不是企业真正需要的。</p></blockquote><blockquote><p>造成这样的现象，我想有几个重要的原因：</p><ul><li><input checked disabled type="checkbox"> 教学安排不当。许多通识课根本不需要学习，而重要的课程安排在大学后期，没有时间认真专研；</li><li><input checked disabled type="checkbox"> 学校资源匮乏，包含教学资源和教师资源。遇到一个优秀的老师可以影响人的一生，老师可以引导学生走入正确的方向，鼓励你不断前行。然而现实社会中，在专心科研教学的老师又有多少呢？更多为了自我荣誉和地位。这样的现象更多的责任不在老师，应该是这浮躁的社会和发展中国家的现状造成的；</li><li><input checked disabled type="checkbox"> 学生自我问题。前面谈的都是外在的原因，真正原因一定是在自身。处于现状的学生不应该”一心只读圣贤书，两耳不闻天下事“，网络2.0时代最发达的就是信息，我们可以充分的利用强大的网络信息来弥补学校的不足。</li></ul></blockquote><blockquote><p>上面说完一般的大学，现今说说“985”“211”大学。他们（本人非985，也非211，故称他们）天生就有优势（当然是自我努力得来，也是辛苦），”强大的师资力量“，”齐备的实验器材“，也有很多好的机会，他们就是应该很厉害吧。但事与愿违，很多“985”“211”大学的同学抱怨大学四年白费，基本没有学到真知识。甚至有人说，倒不如在企业实习3个月学的多。所以，许多“985”“211”大学学生毕业后往往选择考研，因为所学无几啊！！这样看来，不同的大学其实存在许多共同之处。拥有”强大的师资力量“和”齐备的实验器材“的大学教不出好学生，没有”强大的师资力量“和”齐备的实验器材“也教不出优秀的学生。追根看来教育体制起了至关重要的作用。</p></blockquote><blockquote><p>以上是作为一个即将毕业大学生的感悟，我不能改变现实社会，自我也荒废了几年时光，深感可惜。首要的原因还的自我原因，是自我没有把握好时光，多学习知识。这里自是对在读学生，对学校，对国家的希望，虽然现在存在不完美，但是必须还的要有希望，万一实现了怎么办？</p><ul><li><input checked disabled type="checkbox"> 对于学生，切莫做井底之蛙，大学暑假或者业余期间可以找相关企业实习，即使不要工资也不要紧，因为你可以接触社会，了解社会，了解自己。</li><li><input checked disabled type="checkbox"> 对于学校，希望能给学生更多引导，根据社会企业的实际需求，建设完善的教学流程。而教师能够虔诚的教学科研，传授出最有价值的观念，观念包含专业的知识和先进的思想。</li><li><input checked disabled type="checkbox"> 对于国家，希望能够重视教育，实例化教育，因为我们听到太多是的所谓的”教育乃国家之本“，但最后只能沦为茶余的谈资。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
